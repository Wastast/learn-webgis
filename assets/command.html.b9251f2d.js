import{_ as t,o as d,c as e,d as r}from"./app.559f79f4.js";const a="/learn-webgis/image/tools/git/command/gitstatus.png",o={},h=r('<h1 id="基础命令" tabindex="-1"><a class="header-anchor" href="#基础命令" aria-hidden="true">#</a> 基础命令</h1><h2 id="创建仓库" tabindex="-1"><a class="header-anchor" href="#创建仓库" aria-hidden="true">#</a> 创建仓库</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git init</td><td>初始化一个全新的仓库，拥有基础的 git 文件目录结构</td></tr><tr><td>git clone <code>&lt;url&gt; [name]</code></td><td>根据提供的 url 镜像一个远程仓库，name 字段为重命名镜像下来的文件夹</td></tr></tbody></table><h2 id="添加文件-add" tabindex="-1"><a class="header-anchor" href="#添加文件-add" aria-hidden="true">#</a> 添加文件 add</h2><p>Git 的 add 指令具备两种能力</p><ul><li>将新创建的文件添加至暂存区域，并开始跟踪</li><li>将已修改的文件添加至暂存区域</li></ul><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git add <code>&lt;file&gt;</code></td><td>将文件提交到暂存区域，方便下一次提交</td></tr></tbody></table><h2 id="查看文件状态-status" tabindex="-1"><a class="header-anchor" href="#查看文件状态-status" aria-hidden="true">#</a> 查看文件状态 status</h2><img src="'+a+'"><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git status</td><td>查看未提交暂存的和已提交暂存的文件状态</td></tr><tr><td>git status -s</td><td>查看状态简览</td></tr></tbody></table><ul><li>?? 未跟踪的文件</li><li>A 第一次添加到暂存区域的新文件</li><li>MM 右侧的 M 表示文件被修改来但是还没放入暂存区域，左侧的 M 表示文件被修改来并放入暂存区域</li><li>D 文件从仓库中被移除</li></ul><h2 id="查看文件差异-diff" tabindex="-1"><a class="header-anchor" href="#查看文件差异-diff" aria-hidden="true">#</a> 查看文件差异 diff</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git diff</td><td>查看介于未修改和已修改文件状态时对差异</td></tr><tr><td>git diff --cached</td><td>查看介于暂存阶段和未修改阶段时的差异</td></tr></tbody></table><h2 id="提交更新-commit" tabindex="-1"><a class="header-anchor" href="#提交更新-commit" aria-hidden="true">#</a> 提交更新 commit</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git commit -m <code>&lt;text&gt;</code></td><td>将暂存区域文件执行快照后，提交至仓库，并返回当次快照的信息</td></tr><tr><td>git commit -a -m <code>&lt;text&gt;</code></td><td>将未暂存对文件跳过 git add 步骤，直接暂存并提交至仓库</td></tr></tbody></table><h2 id="移除文件-rm" tabindex="-1"><a class="header-anchor" href="#移除文件-rm" aria-hidden="true">#</a> 移除文件 rm</h2><p>Git 的移除文件是从已跟踪文件清单中移除，然后提交，后续就不在跟踪该文件</p><blockquote><p>Git 的移除文件只能移除已跟踪文件</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git rm <code>&lt;file&gt;</code></td><td>将文件从跟踪清单中移除，并删除文件</td></tr><tr><td>git rm -f <code>&lt;file&gt;</code></td><td>将处于已修改和暂存阶段对文件，强制移除，并删除文件</td></tr><tr><td>git rm --cached <code>&lt;file&gt;</code></td><td>将文件从跟踪清单中移除，并保留文件</td></tr></tbody></table><h2 id="查看提交历史-log" tabindex="-1"><a class="header-anchor" href="#查看提交历史-log" aria-hidden="true">#</a> 查看提交历史 log</h2><p>Git 的提交信息通过 commit 提交后，只会返回当次提交信息，如果想看之前的提交信息，就需要使用 log 指令查看日志</p><blockquote><p>进入 git log 后，会进入一种查看终端界面，一直按回车能查看下一条，按 q 能退出查看</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git log</td><td>查看过往提交日志</td></tr><tr><td>git log -p</td><td>查看每次提交差异</td></tr><tr><td>git log --stat</td><td>查看每次提交的简略统计信息</td></tr><tr><td>git log --shortstat</td><td>只显示 --stat 中最后的行数修改添加移除统计</td></tr><tr><td>git log --name-only</td><td>仅在提交信息后显示已修改的文件清单</td></tr><tr><td>git log --name-status</td><td>显示新增、修改、删除的文件清单</td></tr><tr><td>git log --abbrev-commit</td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</td></tr><tr><td>git log --graph</td><td>显示 ASCII 图形表示的分支合并历史</td></tr><tr><td>git log --pretty</td><td>可以指定使用不同格式的方式查看历史</td></tr><tr><td>git log --decorate</td><td>查看各个分支当前所指的对象</td></tr><tr><td>git log --oneline</td><td>让提交记录在一行中显示，仅显示哈希值和提交信息</td></tr></tbody></table><h3 id="限制输出长度" tabindex="-1"><a class="header-anchor" href="#限制输出长度" aria-hidden="true">#</a> 限制输出长度</h3><p>通过限定输出的命令，来查看更好的日志</p><blockquote><p>--命令，除特殊情况，是可以堆叠使用 例如 --p -10</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>-(n)</td><td>仅显示最近的 n 条提交</td></tr><tr><td>--since，--after</td><td>仅显示指定时间之后的提交</td></tr><tr><td>--until，--before</td><td>仅显示指定时间之前的提交</td></tr><tr><td>--author</td><td>仅显示指定作者相关的提交</td></tr><tr><td>--committer</td><td>仅显示指定提交者相关的提交</td></tr><tr><td>--grep</td><td>仅显示含指定关键字的提交</td></tr><tr><td>-S</td><td>仅显示添加或移除来某个关键字的提交</td></tr></tbody></table><h2 id="撤销操作-restore" tabindex="-1"><a class="header-anchor" href="#撤销操作-restore" aria-hidden="true">#</a> 撤销操作 restore</h2><p>Git 撤销修改，主要利用 git restore 命令。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git restore --worktree <code>&lt;file&gt;</code></td><td>表示撤销文件在工作区的修改(还未提交到暂存到状态， 可使用 -W 缩写)</td></tr><tr><td>git restore --staged <code>&lt;file&gt;</code></td><td>撤销暂存区的修改，将文件状态恢复到未 add 之前(可使用 -S 缩写)</td></tr><tr><td>git restore -s HEAD~(n) <code>&lt;file&gt;</code></td><td>将当前工作区文件切换到 n 个 commit 版本之前</td></tr><tr><td>git restore -s <code>&lt;commitID&gt; &lt;file&gt;</code></td><td>将当前工作区文件切换到指定 commitID 的版本</td></tr></tbody></table><h2 id="标签-tag" tabindex="-1"><a class="header-anchor" href="#标签-tag" aria-hidden="true">#</a> 标签 tag</h2><p>tag 是 git 版本库的一个标记，指向某个 commit 的指针。 tag 主要用于发布版本的管理，一个版本发布之后，我们可以为 git 打上 v1.0.1，v1.0.2...这样的标签。 tag 和 branch 有点相似，但是本质上是不同的</p><ul><li>tag 对应的是某次 commit ，是一个点，是不可移动的</li><li>branch 对应的是一系列 commit，是很多点连成的一根线，有一个 HEAD 指针，通过指针来控制指向某一个 commit</li></ul><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git tag <code>&lt;-l，--list&gt;</code></td><td>以列表形式，列出该仓库所有标签，以字母顺序列出</td></tr><tr><td>git tag <code>&lt;-l，--list&gt; &lt;char&gt;</code></td><td>根据字符来查找特定文字的标签。支持通配符</td></tr><tr><td>git tag -a <code>&lt;tag-name&gt;</code> -m <code>&lt;info&gt;</code></td><td>创建一个标签，并附加标签注释。默认给最近一次 commit 打上标签</td></tr><tr><td>git tag -a <code>&lt;tag-name&gt; &lt;commitId&gt;</code></td><td>给指定的提交 ID 打上标签</td></tr><tr><td>git show <code>&lt;tag-name&gt;</code></td><td>查看指定标签的详细信息</td></tr><tr><td>git push <code>&lt;remote-name&gt;&lt;tag-name&gt;</code></td><td>默认情况下，git push 并不会推送标签到远程服务器。需要主动使用命令推送标签到服务器上。</td></tr><tr><td>git push <code>&lt;remote-name&gt;</code> --tags</td><td>一次性推送多个标签到远程服务器</td></tr><tr><td>git tag -d <code>&lt;tag-name&gt;</code></td><td>通过标签名来删除本地标签。该删除方式并不会删除远程标签</td></tr><tr><td>git push <code>&lt;remote-name&gt;</code> -d <code>&lt;tag-name&gt;</code></td><td>根据远程仓库名称和标签名，删除远程仓库的标签</td></tr><tr><td>git checkout <code>&lt;tag-name&gt;</code></td><td>将当前的 HEAD 指针指向 该标签的 commit</td></tr></tbody></table><blockquote><p>对标签使用 checkout 检出的时候，会使仓库处于 &quot;分离头指针&quot; 的状态。如果做了某些更改然后提交他们，标签不会发生变化，且你的新提交不属于任何分支，处于无法访问状态。 所以，如果需要对标签的版本进行修改，需要根据 tag 的 commit 创建一个新分支，然后在分支上进行修改，在根据需求是否继续发布版本(创建标签)。</p></blockquote><h2 id="分支-branch" tabindex="-1"><a class="header-anchor" href="#分支-branch" aria-hidden="true">#</a> 分支 branch</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git branch</td><td>查看当前仓库所有分支</td></tr><tr><td>git branch <code>&lt;branch-name&gt;</code></td><td>创建一个新分支</td></tr><tr><td>git branch -d <code>&lt;branch-name&gt;</code></td><td>删除一个分支</td></tr><tr><td>git branch --merged</td><td>查看哪些分支被当前分支合并</td></tr><tr><td>git branch --no-merged</td><td>查看哪些分支还未被当前分支合并</td></tr><tr><td>git branch -vv</td><td>查看所有的跟踪分支</td></tr><tr><td>git push <code>&lt;remote-name&gt;</code> -d <code>&lt;barnch-name&gt;</code></td><td>删除远程仓库中的分支</td></tr></tbody></table><h2 id="操作远程仓库-remote" tabindex="-1"><a class="header-anchor" href="#操作远程仓库-remote" aria-hidden="true">#</a> 操作远程仓库 remote</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git remote</td><td>查看远程仓库的简写，会列出执行该命令文件夹所有远程仓库的简写</td></tr><tr><td>git remote rename &lt;旧名称&gt; &lt;新名称&gt;</td><td>重命名仓库名称</td></tr><tr><td>git remote -v</td><td>列出该文件夹下的所有远程仓库 url</td></tr><tr><td>git remote add <code>&lt;remote-name&gt; &lt;url&gt;</code></td><td>添加一个新的远程仓库</td></tr><tr><td>git feach <code>&lt;remote-name&gt;</code></td><td>拉取远程仓库数据，<code>&lt;remote-name&gt;</code> 必须在本地具有。仅拉取数据，不合并</td></tr><tr><td>git remote show <code>&lt;remote-name&gt;</code></td><td>查看远程分支详细信息</td></tr><tr><td>gir remote rm <code>&lt;remote-name&gt;</code></td><td>删除本地的远程仓库</td></tr></tbody></table><h2 id="回退-reset" tabindex="-1"><a class="header-anchor" href="#回退-reset" aria-hidden="true">#</a> 回退 reset</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git reset --hard <code>&lt;commit_id&gt;</code></td><td>通过 git log 获取本地提交信息的 commit id，回退到某个版本</td></tr><tr><td>git push -f orgin <code>&lt;branch-name&gt;</code></td><td>强制推送到主分支</td></tr></tbody></table>',41),i=[h];function c(l,g){return d(),e("div",null,i)}const m=t(o,[["render",c],["__file","command.html.vue"]]);export{m as default};
